# Example Strategy Configuration for MarketAnalysis Framework
# This file demonstrates how to configure a trading strategy.

# General Strategy Settings
strategy_name: "ML_Pipeline_Strategy"
description: "Machine Learning pipeline strategy using configured features and model."
strategy_type: "ml" # Select the ML strategy logic
# sma_short_period: 50           # Commented out DMA param
# sma_long_period: 200          # Commented out DMA param
# rsi_period: 14                  # RSI lookback period (Disabled for ML strategy)
# rsi_lower_threshold: 30         # RSI lower threshold for buy signal (Disabled for ML strategy)
# rsi_upper_threshold: 70         # RSI upper threshold for sell/exit signal (Disabled for ML strategy)
log_level: "INFO" # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
results_dir: "strategy_results" # Directory to save backtest results, plots, etc.
data_start_date: "2018-01-01" # Overall start date for data loading
data_end_date: "2023-12-31"   # Overall end date for data loading

# Asset Configuration (List of assets to trade)
assets:
  - symbol: "AAPL" # Ticker symbol (e.g., from yfinance)
    data_source: "yahoo" # Use 'yahoo' as expected by the loader
    # Optional: Specify exchange if needed (e.g., for CCXT)
    # exchange: "binance"
    # Optional: Specify timeframe if needed
    # timeframe: "1d" # e.g., '1m', '5m', '1h', '1d'

# Feature Engineering Configuration (Corresponds to FeatureConfig object)
feature_config:
  # Technical Indicators (using pandas-ta or ta library conventions)
  technical_indicators:
    - indicator: "rsi"
      length: 14
    - indicator: "sma"
      length: 20
    - indicator: "sma"
      length: 50
    - indicator: "atr"
      length: 14
    - indicator: "macd"
      fast: 12  # Corrected parameter name for pandas-ta
      slow: 26  # Corrected parameter name for pandas-ta
      signal: 9 # Corrected parameter name for pandas-ta
    - indicator: "bollinger_bands"
      length: 20 # Corrected parameter name for pandas-ta
      std: 2    # Corrected parameter name for pandas-ta
    - indicator: "adx"
      window: 14
    - indicator: "obv"
    - indicator: "mfi"
      window: 14
    - indicator: "ema"
      length: 9
    - indicator: "ema"
      length: 21
    - indicator: "ema"
      length: 50
    # Add more indicators as needed...

  # Enable/disable additional feature categories
  # fractal_window: 5 # Optional: Specify window if fractal_features is true (defaults to 5)

  # Target variable config (Corresponds to FeatureConfig attributes)
  target_type: "triple_barrier" # 'triple_barrier', 'directional'
  # Parameters for Triple Barrier (if target_type is triple_barrier)
  atr_multiplier_tp: 2.0 # Profit Take multiple (from pt_sl[0]) - Adjusted for 2:1 ratio
  atr_multiplier_sl: 1.0 # Stop Loss multiple (from pt_sl[1])
  max_holding_period: 15 # Max holding period in bars
  # min_return: 0.001 # Not directly used by FeatureConfig init
  # volatility_lookback: 20 # Not directly used by FeatureConfig init
  # volatility_target: 0.01 # Not directly used by FeatureConfig init
  # Flags for new feature categories (added in Subtask 12)
  volatility_features: true
  regime_features: true
  momentum_features: true
  fractal_features: true # Enable fractals as well

  # Correlation Filtering (Optional)
  correlation_filter:
    apply: true # Ensure correlation filtering is enabled
    threshold: 0.9 # Set correlation threshold

  # Feature Selection Configuration
  feature_selection_method:
    enabled: true # Whether to perform feature selection
    # Method for feature selection. Options:
    # 'importance': Use RandomForest feature importance.
    # 'mutual_info': Use mutual information (SelectKBest).
    # 'rfe': Use Recursive Feature Elimination (with Logistic Regression).
    # 'pca': Use Principal Component Analysis (dimensionality reduction, changes features).
    # 'model': Use feature importance from a specified model (e.g., lightgbm, xgboost).
    # null or 'none': Disable feature selection.
    method: "importance" # Use importance-based selection
    params: # Parameters specific to the chosen method
      # For 'importance', 'mutual_info', 'rfe', 'model':
      n_features: 25 # Select top 25 features
      # For 'importance' (alternative to n_features):
      # threshold: 0.01 # Minimum importance threshold
      # For 'rfe':
      # step: 1 # Number of features to remove at each iteration
      # For 'pca':
      # n_components: 30 # Number of principal components
      # For 'model':
      # model_type: "lightgbm" # Model to use ('lightgbm' or 'xgboost')
      # threshold: "median" # Threshold for SelectFromModel

# Feature Differencing (optional)
# differencing:
#   apply: false # Set to true to enable differencing
#   period: 1 # Differencing period (usually 1)
#   # List of features to apply differencing to. If empty or null, applies to none.
#   # Example: ['sma_length20', 'sma_length50', 'ema_length12']
#   features: []

# Feature Scaling (optional)
# scaling:
#   # Options: 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'None' or null
#   method: "StandardScaler"
#   # Note: Scaling is typically applied *after* differencing if both are enabled.
#   #   apply_to: ["rsi", "sma_20", "sma_50"] # List of features to scale, or 'all'

# Model Configuration (Corresponds to ModelConfig object)
model_config:
  model_type: "lightgbm" # Use the key registered in model_factory.py
  # Signal Generation Adjustments
  probability_threshold: 0.44   # Lowered threshold below observed max probability (~0.45)
  signal_trend_filter_ma: null # Disable trend filter
  signal_volatility_filter_atr: null # Disable volatility filter
  signal_cooling_period: 0 # Disable cooling period
  # Default model params (used if optimization is off or fails)
  params: # Parameters specific to the chosen model type (lightgbm)
    n_estimators: 100
    # max_depth: 10 # Example, can add more defaults
    # min_child_samples: 20 # Example
    random_state: 42
    # class_weight: "balanced" # Often useful for imbalanced data
  #   # Add other relevant scikit-learn/xgboost/etc. parameters

  # Feature Selection (optional) - Removed as not part of ModelConfig init (handled in FeatureConfig)
  # feature_selection:
  #   method: null # e.g., "SelectKBest", "RFE", null
  #   params: {} # Parameters for the selection method

  # Hyperparameter Optimization (optional) - Keep disabled for now
  optimize_hyperparams: true # Corresponds to ModelConfig attribute - ENABLED
  optimization_method: "optuna" # 'optuna', 'random', 'grid', 'bayesian' (if hyperopt installed)
  optimization_trials: 3      # Number of trials for optuna/random/bayesian (DEBUG RUN)
  cv_folds: 5                 # Cross-validation folds during optimization
  scoring_metric: "f1_weighted" # Metric for optimization (must be supported by sklearn.model_selection.cross_val_score)
  # Note: 'direction' (maximize/minimize) is often inferred by Optuna/sklearn based on the metric,
  # but ensure the optimization objective function returns the metric correctly.

  # Search space should be defined within model_config for StrategyConfig.from_dict to load it
  search_space:
    # Optuna suggestion format: [type, low, high, step/log]
    # These names must match the expected hyperparameter names for the LightGBM model
    learning_rate: ["float", 0.005, 0.1, true] # Log scale for learning rate
    n_estimators: ["int", 50, 500, 50] # Step size of 50
    num_leaves: ["int", 10, 100, 1]
    max_depth: ["int", 3, 15, 1]
    reg_alpha: ["float", 1e-8, 1.0, true] # L1 regularization (log scale)
    reg_lambda: ["float", 1e-8, 1.0, true] # L2 regularization (log scale)
    colsample_bytree: ["float", 0.6, 1.0, false] # Feature fraction
    subsample: ["float", 0.6, 1.0, false] # Data fraction (bagging)
    min_child_samples: ["int", 5, 50, 1] # Minimum number of data needed in a child leaf
    # Add other LightGBM parameters as needed, e.g.:
    # boosting_type: ["categorical", ["gbdt", "dart"]]
    # min_split_gain: ["float", 0.0, 0.5, false]

# # Walk-Forward Validation Configuration # Ensure this starts at column 0 - Commented out for DMA
# # walk_forward:
# #   enabled: true
# #   train_window_size: 252 # Number of periods (e.g., days) for initial training
# #   test_window_size: 63 # Number of periods for testing (out-of-sample)
# #   step_size: 21 # How many periods to step forward each iteration
# #   retrain_every_step: true # Whether to retrain the model at each step
# #   purge_window_size: 5 # Gap between train and test to prevent lookahead bias
# #   expanding_window: false # Use expanding window instead of sliding window for training

# Backtesting / Trading Simulation Configuration
trading:
  initial_capital: 100000.0
  commission_bps: 2.0 # Commission in basis points (e.g., 2.0 = 0.02%)
  slippage_bps: 1.0 # Slippage estimate in basis points
  use_dynamic_stops: false # Keep dynamic stops disabled for this simple RSI strategy
  position_sizing:
    method: "fixed_fractional" # Use fixed fractional sizing
    params:
      fraction: 0.10 # Risk 10% of capital per trade (adjust as needed)
      # amount: 1000 # Fixed amount per trade (if using 'fixed_amount')
  stop_loss:
    method: null # No explicit stop loss for this simple version
    # params:
    #   multiplier: 1.0 # Example: ATR multiplier if enabled
    #   # percentage: 0.05 # Fixed percentage (if using 'fixed_percentage')
  take_profit:
    method: null # No explicit take profit (exit is based on RSI crossing upper threshold)
    # params:
    #   multiplier: 2.0 # Example: ATR multiplier if enabled
    #   # percentage: 0.10 # Fixed percentage (if using 'fixed_percentage')

# # Market Regime Detection (Optional) - Commented out for DMA
# market_regime:
#   enabled: true
#   method: "volatility_clustering" # e.g., "volatility_clustering", "rule_based_sma"
#   params: # Parameters specific to the chosen method
#     # For volatility_clustering:
#     n_clusters: 3
#     volatility_indicator: "atr"
#     volatility_period: 20
#   regime_actions: # Define actions based on detected regime index (0, 1, 2, ...)
#     0: "trade_normal"  # Example: Low volatility regime - trade normally
#     1: "reduce_risk"   # Example: Medium volatility regime - reduce position size (e.g., by half)
#     2: "no_trade"      # Example: High volatility regime - avoid trading
#     # For rule_based_sma:
#     # short_sma: 20
#     # long_sma: 50
#   # Define how regimes affect trading (optional)
#   # regime_actions:
#   #   regime_0: "trade_long_only"
#   #   regime_1: "trade_short_only"
#   #   regime_2: "no_trade"
