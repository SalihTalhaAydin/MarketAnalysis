# Dependency Management

This project uses `setuptools` for defining package requirements and `pip-tools` for generating pinned lockfiles, ensuring reproducible environments.

## Defining Dependencies (`setup.py`)

-   **Core Dependencies:** Essential packages required for the framework to run are listed under `install_requires` in `setup.py`.
-   **Optional Dependencies:**
    -   `full`: Includes extra libraries for advanced modeling (XGBoost, LightGBM, TensorFlow), analysis (SHAP, Pyfolio), optimization (Optuna, Hyperopt), and data sources (CCXT, Alpha Vantage). Install with `pip install .[full]`.
    -   `dev`: Includes tools needed for development, testing, and code quality checks (pytest, pytest-cov, pylint, black, isort, pip-tools, pre-commit, ruff). Install with `pip install .[dev]`.
    -   `docs`: Includes tools needed for building documentation (Sphinx, themes, parsers). Install with `pip install .[docs]`.

## Lockfiles (`requirements.txt`, `requirements-dev.txt`)

Pinned versions of dependencies are managed using lockfiles generated by `pip-tools`.

-   `requirements.txt`: Contains pinned versions of **core** dependencies (`install_requires`). Generated using:
    ```bash
    python -m piptools compile --output-file=requirements.txt setup.py
    ```
-   `requirements-dev.txt`: Contains pinned versions of **core**, **dev**, and **docs** dependencies (`install_requires` + `extras_require['dev']` + `extras_require['docs']`). Generated using:
    ```bash
    python -m piptools compile --extra dev --extra docs --output-file=requirements-dev.txt setup.py
    ```

**Do not manually edit these files.** They should only be updated by running the `pip-compile` commands after modifying `setup.py`.

## Installation

-   **For Users:**
    ```bash
    pip install . # Installs core dependencies
    # or install with optional extras:
    pip install .[full]
    ```
    Alternatively, install directly from the lockfile for a guaranteed reproducible environment (though less standard for library usage):
    ```bash
    pip install -r requirements.txt
    ```

-   **For Developers:**
    1.  Set up a virtual environment (recommended).
    2.  Install in editable mode with development dependencies:
        ```bash
        pip install -e .[dev,docs]
        ```
    3.  Alternatively, sync your environment exactly with the lockfile:
        ```bash
        pip install -r requirements-dev.txt
        pip install -e . # Install the local package itself
        ```
    4.  Install pre-commit hooks:
        ```bash
        python -m pre_commit install
        ```

## Updating Dependencies

1.  Modify the desired version constraints in `setup.py`.
2.  Regenerate the lockfiles:
    ```bash
    python -m piptools compile --output-file=requirements.txt setup.py
    python -m piptools compile --extra dev --extra docs --output-file=requirements-dev.txt setup.py
    ```
3.  Update your development environment if needed:
    ```bash
    pip install -r requirements-dev.txt
    ```
4.  Commit the changes to `setup.py`, `requirements.txt`, and `requirements-dev.txt`.
